{
  "name": "better-scripts-demo",
  "version": "1.0.0",
  "description": "Demo of smart-run with better-scripts configuration (mixed formats)",
  "scripts": {
    "scripts": "better-scripts"
  },
  "better-scripts": {
    "start": {
      "command": "cross-env NODE_ENV=development BABEL_ENV=development webpack serve --config webpack.dev.js --hot --open --port 3000 --host 0.0.0.0 --history-api-fallback --overlay --stats detailed --devtool eval-source-map",
      "description": "Start the development server with hot reload, source maps, and detailed debugging",
      "alias": "üöÄ Dev Server"
    },
    "build": {
      "command": "cross-env NODE_ENV=production BABEL_ENV=production webpack --config webpack.prod.js --mode production --optimization-minimize --optimization-concatenate-modules --optimization-tree-shaking --output-path ./dist --progress --colors --analyze",
      "description": "Build the project for production deployment with optimization and bundle analysis",
      "alias": "üèóÔ∏è Build"
    },
    "test": [
      "cross-env NODE_ENV=test jest --config jest.config.js --coverage --coverageDirectory=coverage --coverageReporters=text-lcov --coverageReporters=html --coverageThreshold='{\"global\":{\"branches\":80,\"functions\":80,\"lines\":80,\"statements\":80}}' --watchAll=false --ci --forceExit --detectOpenHandles --maxWorkers=4",
      "Run comprehensive test suite with coverage reports and CI optimizations"
    ],
    "test:watch": {
      "command": "cross-env NODE_ENV=test jest --config jest.config.js --watch --coverage --coverageDirectory=coverage --coverageReporters=text --notify --onlyChanged --changedSince=HEAD --watchman",
      "alias": "üß™ Test Watcher"
    },
    "test:coverage": {
      "command": "cross-env NODE_ENV=test jest --config jest.config.js --coverage --coverageDirectory=coverage --coverageReporters=text-lcov --coverageReporters=html --coverageThreshold='{\"global\":{\"branches\":80,\"functions\":80,\"lines\":80,\"statements\":80}}' --watchAll=false --ci",
      "alias": "üìä Test Coverage"
    },
    "lint": {
      "command": "eslint src/**/*.{js,jsx,ts,tsx} --config .eslintrc.js --cache --cache-location node_modules/.cache/eslint --fix --format stylish --max-warnings 0 --ignore-path .eslintignore && tsc --noEmit --project tsconfig.json",
      "description": "Lint source code with ESLint and perform TypeScript type checking",
      "alias": "üîç Linter"
    },
    "format": [
      "prettier --config .prettierrc --ignore-path .prettierignore --write 'src/**/*.{js,jsx,ts,tsx,json,css,scss,md}' && stylelint 'src/**/*.{css,scss}' --config .stylelintrc.js --fix --formatter verbose",
      "Format code using Prettier and fix CSS/SCSS with Stylelint"
    ],
    "typecheck": {
      "command": "tsc --noEmit --project tsconfig.json --skipLibCheck false --strict --exactOptionalPropertyTypes --noImplicitReturns --noFallthroughCasesInSwitch --noUncheckedIndexedAccess --incremental",
      "alias": "‚úÖ Type Check"
    },
    "deploy": {
      "command": "npm run build && aws s3 sync ./dist s3://my-app-bucket --delete --cache-control max-age=31536000 --exclude '*.html' && aws s3 sync ./dist s3://my-app-bucket --delete --cache-control max-age=0 --include '*.html' && aws cloudfront create-invalidation --distribution-id E1234567890123 --paths '/*' && slack-webhook 'Deployment completed successfully'",
      "description": "Build and deploy the application to AWS S3 with CloudFront invalidation and Slack notification",
      "alias": "üöÄ Deploy"
    },
    "clean": "rimraf dist coverage .nyc_output node_modules/.cache .eslintcache .stylelintcache && npm cache clean --force && docker system prune -f",
    "docs": {
      "command": "typedoc --out docs --target ES6 --theme minimal --mode file --exclude '**/node_modules/**' --exclude '**/*.test.ts' --exclude '**/*.spec.ts' --includeDeclarations --excludeExternals --readme README.md --plugin typedoc-plugin-markdown",
      "description": "Generate comprehensive project documentation with TypeDoc and markdown support",
      "alias": "üìö Docs"
    },
    "docker:build": {
      "command": "docker build -t my-app:latest --build-arg NODE_ENV=production --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg VCS_REF=$(git rev-parse --short HEAD) --build-arg VERSION=$(npm version --json | jq -r .version) --no-cache --progress=plain .",
      "description": "Build Docker image with build arguments for production deployment",
      "alias": "üê≥ Docker Build"
    },
    "e2e": {
      "command": "cypress run --config baseUrl=http://localhost:3000 --browser chrome --headless --record --key $CYPRESS_RECORD_KEY --parallel --ci-build-id $CI_BUILD_ID --group 'UI Tests' --spec 'cypress/integration/**/*.spec.js'",
      "description": "Run end-to-end tests with Cypress in CI mode with parallel execution and recording",
      "alias": "üé≠ E2E Tests"
    },
    "performance": {
      "command": "lighthouse http://localhost:3000 --output json --output html --output-path ./reports/lighthouse --chrome-flags='--headless --no-sandbox --disable-gpu --disable-dev-shm-usage' --preset=desktop --budget-path=budget.json --throttling-method=simulate --throttling.cpuSlowdownMultiplier=4",
      "description": "Run comprehensive performance audit with Lighthouse and performance budget validation",
      "alias": "‚ö° Performance"
    }
  },
  "keywords": ["demo", "smart-run", "better-scripts"],
  "author": "smart-run",
  "license": "MIT"
}
