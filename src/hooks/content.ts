import path from 'node:path';

export function generateHookContent(hookName: string): string {
  const nodeExecutable = process.execPath;
  const smartRunLinter = path.resolve(__dirname, '../config-linter.js');

  const base = `#!/bin/sh
# Smart-run configuration linter hook
# Generated by smart-run git hooks integration

# smart-run-config-lint marker (do not remove)
`;

  switch (hookName) {
    case 'pre-commit':
      return (
        base +
        `
# Check if package-meta.yaml exists and lint it
if [ -f "package-meta.yaml" ]; then
  echo "🔍 Linting smart-run configuration..."
  "${nodeExecutable}" "${smartRunLinter}"
  if [ $? -ne 0 ]; then
    echo "❌ Configuration linting failed. Please fix issues before committing."
    echo "💡 Run 'npx smart-run lint' to see detailed issues."
    exit 1
  fi
  echo "✅ Configuration linting passed!"
fi
`
      );
    case 'pre-push':
      return (
        base +
        `
if [ -f "package-meta.yaml" ]; then
  echo "🔍 Linting smart-run configuration before push..."
  "${nodeExecutable}" "${smartRunLinter}"
  if [ $? -ne 0 ]; then
    echo "❌ Configuration linting failed. Please fix issues before pushing."
    echo "💡 Run 'npx smart-run lint' to see detailed issues."
    exit 1
  fi
  echo "✅ Configuration linting passed!"
fi
`
      );
    case 'commit-msg':
      return (
        base +
        `
if [ -f "package-meta.yaml" ]; then
  echo "🔍 Linting smart-run configuration..."
  "${nodeExecutable}" "${smartRunLinter}"
  if [ $? -ne 0 ]; then
    echo "❌ Configuration linting failed. Please fix issues before committing."
    echo "💡 Run 'npx smart-run lint' to see detailed issues."
    exit 1
  fi
fi
`
      );
    default:
      throw new Error(`Unsupported hook: ${hookName}`);
  }
}
